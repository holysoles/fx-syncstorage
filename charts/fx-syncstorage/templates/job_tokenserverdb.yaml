# Provide custom init scripts for the DB. Per jeena, we need this init script for the tokenserver. However it can only run after the DB is initialized by syncstorage, so this job must run after
{{- if .Values.tokenserverdb.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ printf "%s-tokenserverdb-config" .Release.Name }}
  labels:
    {{- include "fx-syncstorage.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded
spec:
  template:
    metadata:
      labels:
        {{- include "fx-syncstorage.labels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      containers:
      - name: post-install-job
        image: {{ printf "%s/%s:%s" .Values.tokenserverdb.image.registry .Values.tokenserverdb.image.repository .Values.tokenserverdb.image.tag }}
        env:
          - name: TOKENSERVER_DB_HOST
            value: {{ printf "%s-tokenserverdb" .Release.Name }}
          - name: TOKENSERVER_USER
            value: {{ .Values.tokenserverdb.auth.username }}
          - name: TOKENSERVER_PASS
            valueFrom:
              secretKeyRef:
                name: autogenerated-fx-tokenserverdb
                key: mysql-password
          - name: DOMAIN
            value: {{ .Values.syncstorage.domain }}
          - name: MAX_USERS
            value: {{ .Values.syncstorage.maxUsers | quote }}
        command:
          - /bin/sh
          - -c
          - |
            echo "started, waiting 15s before testings connection to allow for DB startup.."
            sleep 15;
            IS_DONE=10;
            while [ $IS_DONE -gt 0 ]; do
                mysql -h $TOKENSERVER_DB_HOST -u"$TOKENSERVER_USER" -p"$TOKENSERVER_PASS" tokenserver -e "
                INSERT IGNORE INTO services (id, service, pattern) VALUES ('1', 'sync-1.5', '{node}/1.5/{uid}');
                INSERT INTO nodes (id, service, node, available, current_load, capacity, downed, backoff)
                VALUES ('1', '1', '${DOMAIN}', '1', '0', '${MAX_USERS}', '0', '0') 
                ON DUPLICATE KEY UPDATE node='${DOMAIN}';
                "
                      
                RC=$?;
                echo "mysql return code was $RC";
                if [ $RC -eq 0 ]; then
                  IS_DONE=0;
                  echo 'Done!';
                  exit 0;
                else
                  echo 'Waiting for tables...';
                  sleep 5;
                  IS_DONE=$((IS_DONE - 1));
                fi;
            done;
            echo 'Giving up, sorry';
            exit 42;
{{- end }}