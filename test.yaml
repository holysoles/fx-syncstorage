---
# Source: fx-syncstorage/charts/syncserverdb/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: release-name-syncserverdb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: syncserverdb
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: syncserverdb-12.3.1
    app.kubernetes.io/part-of: mysql
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: syncserverdb
      app.kubernetes.io/version: 8.4.4
      helm.sh/chart: syncserverdb-12.3.1
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow connection from other cluster pods
    - ports:
        - port: 3306
---
# Source: fx-syncstorage/charts/tokenserverdb/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: release-name-tokenserverdb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: tokenserverdb
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: tokenserverdb-12.3.1
    app.kubernetes.io/part-of: mysql
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: tokenserverdb
      app.kubernetes.io/version: 8.4.4
      helm.sh/chart: tokenserverdb-12.3.1
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow connection from other cluster pods
    - ports:
        - port: 3306
---
# Source: fx-syncstorage/charts/syncserverdb/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: release-name-syncserverdb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: syncserverdb
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: syncserverdb-12.3.1
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: syncserverdb
      app.kubernetes.io/part-of: mysql
      app.kubernetes.io/component: primary
---
# Source: fx-syncstorage/charts/tokenserverdb/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: release-name-tokenserverdb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: tokenserverdb
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: tokenserverdb-12.3.1
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: tokenserverdb
      app.kubernetes.io/part-of: mysql
      app.kubernetes.io/component: primary
---
# Source: fx-syncstorage/charts/syncserverdb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-syncserverdb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: syncserverdb
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: syncserverdb-12.3.1
    app.kubernetes.io/part-of: mysql
automountServiceAccountToken: false
secrets:
  - name: autogenerated-fx-syncserverdb
---
# Source: fx-syncstorage/charts/tokenserverdb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-tokenserverdb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: tokenserverdb
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: tokenserverdb-12.3.1
    app.kubernetes.io/part-of: mysql
automountServiceAccountToken: false
secrets:
  - name: autogenerated-fx-tokenserverdb2
---
# Source: fx-syncstorage/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  labels:
    helm.sh/chart: fx-syncstorage-0.1.0
    app.kubernetes.io/name: fx-syncstorage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.13.6"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: fx-syncstorage/templates/secret_syncserverdb.yaml
apiVersion: v1
kind: Secret
metadata:
  name: autogenerated-fx-syncserverdb
  labels:
    helm.sh/chart: fx-syncstorage-0.1.0
    app.kubernetes.io/name: fx-syncstorage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.13.6"
    app.kubernetes.io/managed-by: Helm
  annotations:
#    helm.sh/hook: pre-install
data:
  mysql-root-password: "VElWS3NRNVZjdlZlVDlJaGJQcUc="
  mysql-password: "a0NRWmZYU0xwZTRBZ0VheFpmUm8="
---
# Source: fx-syncstorage/templates/secret_syncstorage.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name
  labels:
    helm.sh/chart: fx-syncstorage-0.1.0
    app.kubernetes.io/name: fx-syncstorage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.13.6"
    app.kubernetes.io/managed-by: Helm
data:
  SYNC_MASTER_SECRET: YzZEWk1IQmZvdGswdENGalNGbGg=
  SYNC_TOKENSERVER__FXA_METRICS_HASH_SECRET: "WWRiWDhZNlpHY29SNEwwbHZiMXA="
---
# Source: fx-syncstorage/charts/syncserverdb/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-syncserverdb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: syncserverdb
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: syncserverdb-12.3.1
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    authentication_policy='* ,,'
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    mysqlx=0
    mysqlx_port=33060
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    slow_query_log=0
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: fx-syncstorage/charts/tokenserverdb/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-tokenserverdb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: tokenserverdb
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: tokenserverdb-12.3.1
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    authentication_policy='* ,,'
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    mysqlx=0
    mysqlx_port=33060
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    slow_query_log=0
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: fx-syncstorage/templates/configmap_dbs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-db
  labels:
    helm.sh/chart: fx-syncstorage-0.1.0
    app.kubernetes.io/name: fx-syncstorage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.13.6"
    app.kubernetes.io/managed-by: Helm
data:
  DOMAIN: https://fxsync.example.com
---
# Source: fx-syncstorage/templates/configmap_syncstorage.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name
  labels:
    helm.sh/chart: fx-syncstorage-0.1.0
    app.kubernetes.io/name: fx-syncstorage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.13.6"
    app.kubernetes.io/managed-by: Helm
data:
  DOMAIN: https://fxsync.example.com
  SYNC_HOST: "0.0.0.0"
  SYNC_HUMAN_LOGS: "1"
  SYNC_TOKENSERVER__ENABLED: "true"
  SYNC_TOKENSERVER__RUN_MIGRATIONS: "true"
  SYNC_TOKENSERVER__NODE_TYPE: mysql
  SYNC_TOKENSERVER__FXA_EMAIL_DOMAIN: api.accounts.firefox.com
  SYNC_TOKENSERVER__FXA_OAUTH_SERVER_URL: https://oauth.accounts.firefox.com/v1
  SYNC_TOKENSERVER__ADDITIONAL_BLOCKING_THREADS_FOR_FXA_REQUESTS: "2"
  RUST_LOG:  info
---
# Source: fx-syncstorage/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-secret-role
  labels:
    helm.sh/chart: fx-syncstorage-0.1.0
    app.kubernetes.io/name: fx-syncstorage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.13.6"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create"]
---
# Source: fx-syncstorage/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-secret-rolebinding
  labels:
    helm.sh/chart: fx-syncstorage-0.1.0
    app.kubernetes.io/name: fx-syncstorage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.13.6"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: default
    namespace: default
roleRef:
  kind: Role
  name: release-name-secret-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: fx-syncstorage/charts/syncserverdb/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-syncserverdb-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: syncserverdb
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: syncserverdb-12.3.1
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: syncserverdb
    app.kubernetes.io/component: primary
---
# Source: fx-syncstorage/charts/syncserverdb/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-syncserverdb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: syncserverdb
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: syncserverdb-12.3.1
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: syncserverdb
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
---
# Source: fx-syncstorage/charts/tokenserverdb/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-tokenserverdb-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: tokenserverdb
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: tokenserverdb-12.3.1
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: tokenserverdb
    app.kubernetes.io/component: primary
---
# Source: fx-syncstorage/charts/tokenserverdb/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-tokenserverdb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: tokenserverdb
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: tokenserverdb-12.3.1
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: tokenserverdb
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
---
# Source: fx-syncstorage/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-fx-syncstorage
  labels:
    helm.sh/chart: fx-syncstorage-0.1.0
    app.kubernetes.io/name: fx-syncstorage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.13.6"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: fx-syncstorage
    app.kubernetes.io/instance: release-name
---
# Source: fx-syncstorage/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-fx-syncstorage
  labels:
    helm.sh/chart: fx-syncstorage-0.1.0
    app.kubernetes.io/name: fx-syncstorage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.13.6"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fx-syncstorage
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        helm.sh/chart: fx-syncstorage-0.1.0
        app.kubernetes.io/name: fx-syncstorage
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.13.6"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: fx-syncstorage
          image: "mozilla/syncstorage-rs:0.13.6"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: release-name
            - secretRef:
                name: release-name
            - secretRef:
                name: release-name-db-urls
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /__heartbeat__
              port: 8000
          readinessProbe:
            httpGet:
              path: /__heartbeat__
              port: 8000
---
# Source: fx-syncstorage/charts/syncserverdb/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-syncserverdb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: syncserverdb
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: syncserverdb-12.3.1
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: syncserverdb
      app.kubernetes.io/part-of: mysql
      app.kubernetes.io/component: primary
  serviceName: release-name-syncserverdb-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 55c17a831d52dc4d02efc59b023285761db816f8524d5881252f99072f9ddf1b
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: syncserverdb
        app.kubernetes.io/version: 8.4.4
        helm.sh/chart: syncserverdb-12.3.1
        app.kubernetes.io/part-of: mysql
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: release-name-syncserverdb
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/name: syncserverdb
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: preserve-logs-symlinks
          image: docker.io/bitnami/mysql:8.4.4-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/libfs.sh
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/mysql/logs; then
                cp -r /opt/bitnami/mysql/logs /emptydir/app-logs-dir
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.4.4-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD_FILE
              value: /opt/bitnami/mysql/secrets/mysql-root-password
            - name: MYSQL_ENABLE_SSL
              value: "no"
            - name: MYSQL_USER
              value: "syncuser"
            - name: MYSQL_PASSWORD_FILE
              value: /opt/bitnami/mysql/secrets/mysql-password
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_DATABASE
              value: "syncstorage"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/logs
              subPath: app-logs-dir
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
            - name: mysql-credentials
              mountPath: /opt/bitnami/mysql/secrets/
      volumes:
        - name: config
          configMap:
            name: release-name-syncserverdb
        - name: mysql-credentials
          secret:
            secretName: autogenerated-fx-syncserverdb
            items:
              - key: mysql-root-password
                path: mysql-root-password
              - key: mysql-password
                path: mysql-password
        - name: empty-dir
          emptyDir: {}
        - name: data
          emptyDir: {}
---
# Source: fx-syncstorage/charts/tokenserverdb/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-tokenserverdb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: tokenserverdb
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: tokenserverdb-12.3.1
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: tokenserverdb
      app.kubernetes.io/part-of: mysql
      app.kubernetes.io/component: primary
  serviceName: release-name-tokenserverdb-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: bc009ad920081c09629b87b6fe0421af50392d6f990761a59a234e6faf7db45e
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: tokenserverdb
        app.kubernetes.io/version: 8.4.4
        helm.sh/chart: tokenserverdb-12.3.1
        app.kubernetes.io/part-of: mysql
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: release-name-tokenserverdb
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/name: tokenserverdb
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: preserve-logs-symlinks
          image: docker.io/bitnami/mysql:8.4.4-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/libfs.sh
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/mysql/logs; then
                cp -r /opt/bitnami/mysql/logs /emptydir/app-logs-dir
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.4.4-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD_FILE
              value: /opt/bitnami/mysql/secrets/mysql-root-password
            - name: MYSQL_ENABLE_SSL
              value: "no"
            - name: MYSQL_USER
              value: "tokenuser"
            - name: MYSQL_PASSWORD_FILE
              value: /opt/bitnami/mysql/secrets/mysql-password
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_DATABASE
              value: "tokenserver"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/logs
              subPath: app-logs-dir
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
            - name: mysql-credentials
              mountPath: /opt/bitnami/mysql/secrets/
      volumes:
        - name: config
          configMap:
            name: release-name-tokenserverdb
        - name: mysql-credentials
          secret:
            secretName: autogenerated-fx-tokenserverdb2
            items:
              - key: mysql-root-password
                path: mysql-root-password
              - key: mysql-password
                path: mysql-password
        - name: empty-dir
          emptyDir: {}
        - name: data
          emptyDir: {}
---
# Source: fx-syncstorage/templates/secret_dbUrls.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-db-urls
  labels:
    helm.sh/chart: fx-syncstorage-0.1.0
    app.kubernetes.io/name: fx-syncstorage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.13.6"
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    spec:
      serviceAccountName: default
      restartPolicy: Never
      containers:
        - name: create-db-urls-secret
          image: bitnami/kubectl:latest
          env:
            - name: SECRET_NAME
              value: release-name-db-urls
            - name: TOKEN_DB_USER
              value: .Values.tokenserverdb.auth.username
            - name: TOKEN_DB_PASS
              valueFrom:
                secretKeyRef:
                  name: autogenerated-fx-tokenserverdb2
                  key: mysql-password
                  optional: false
            - name: TOKEN_DB_HOST
              value: release-name-tokenserverdb
            - name: TOKEN_DB
              value: tokenserver
            - name: SYNC_DB_USER
              value: .Values.syncserverdb.auth.username
            - name: SYNC_DB_PASS
              valueFrom:
                secretKeyRef:
                  name: autogenerated-fx-syncserverdb
                  key: mysql-password
                  optional: false
            - name: SYNC_DB_HOST
              value: release-name-syncserverdb     
            - name: SYNC_DB
              value: syncstorage
          command:
            - /bin/sh
            - -c
            - |+
              kubectl create -f - <<EOF
              ---
              apiVersion: v1
              kind: Secret
              metadata:
                name: $SECRET_NAME
                labels:
                  helm.sh/chart: fx-syncstorage-0.1.0
                  app.kubernetes.io/name: fx-syncstorage
                  app.kubernetes.io/instance: release-name
                  app.kubernetes.io/version: "0.13.6"
                  app.kubernetes.io/managed-by: Helm
              data:
                SYNC_SYNCSTORAGE__DATABASE_URL: $(echo -n "mysql://${SYNC_DB_USER}:${SYNC_DB_PASS}@${SYNC_DB_HOST}:3306/${SYNC_DB}" | base64 -w 0)
                SYNC_TOKENSERVER__DATABASE_URL: $(echo -n "mysql://${TOKEN_DB_USER}:${TOKEN_DB_PASS}@${TOKEN_DB_HOST}:3306/${TOKEN_DB}" | base64 -w 0)
              EOF
---
# Source: fx-syncstorage/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-fx-syncstorage-test-connection"
  labels:
    helm.sh/chart: fx-syncstorage-0.1.0
    app.kubernetes.io/name: fx-syncstorage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.13.6"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-fx-syncstorage:80']
  restartPolicy: Never
---
# Source: fx-syncstorage/templates/job_tokenserverdb.yaml
# Provide custom init scripts for the DB. Per jeena, we need this init script for the tokenserver. However it can only run after the DB is initialized by syncstorage, so this job must run after
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-tokenserverdb-config
  labels:
    helm.sh/chart: fx-syncstorage-0.1.0
    app.kubernetes.io/name: fx-syncstorage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.13.6"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: post-install
#    helm.sh/hook-delete-policy: hook-succeeded
spec:
  template:
    metadata:
      labels:
        helm.sh/chart: fx-syncstorage-0.1.0
        app.kubernetes.io/name: fx-syncstorage
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.13.6"
        app.kubernetes.io/managed-by: Helm
    spec:
      restartPolicy: Never
      containers:
      - name: post-install-job
        image: docker.io/bitnami/mysql:8.4.4-debian-12-r4
        env:
          - name: TOKENSERVER_DB_HOST
            value: release-name-tokenserverdb
          - name: TOKENSERVER_USER
            value: tokenuser
          - name: TOKENSERVER_PASS
            valueFrom:
              secretKeyRef:
                name: autogenerated-fx-tokenserverdb
                key: mysql-password
          - name: DOMAIN
            value: https://fxsync.example.com
          - name: MAX_USERS
            value: "1"
        command:
          - /bin/sh
          - -c
          - |
            echo "started, waiting 15s before testings connection to allow for DB startup.."
            sleep 15;
            IS_DONE=10;
            while [ $IS_DONE -gt 0 ]; do
                mysql -h $TOKENSERVER_DB_HOST -u"$TOKENSERVER_USER" -p"$TOKENSERVER_PASS" tokenserver -e "
                INSERT IGNORE INTO services (id, service, pattern) VALUES ('1', 'sync-1.5', '{node}/1.5/{uid}');
                INSERT INTO nodes (id, service, node, available, current_load, capacity, downed, backoff)
                VALUES ('1', '1', '${DOMAIN}', '1', '0', '${MAX_USERS}', '0', '0') 
                ON DUPLICATE KEY UPDATE node='${DOMAIN}';
                "
                      
                RC=$?;
                echo "mysql return code was $RC";
                if [ $RC -eq 0 ]; then
                  IS_DONE=0;
                  echo 'Done!';
                  exit 0;
                else
                  echo 'Waiting for tables...';
                  sleep 5;
                  IS_DONE=$((IS_DONE - 1));
                fi;
            done;
            echo 'Giving up, sorry';
            exit 42;
